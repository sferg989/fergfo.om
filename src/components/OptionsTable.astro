---
import { OptionsService } from '../services/optionsService';
import { groupOptionsByExpiry } from '../utils/optionsUtils';
import OptionsGroup from './optionsGroup.astro';
import HighScoreOptions from './highScoreOptions.astro';
import HighestScoreOption from './highest_score_option.astro';
import { Debug } from 'astro:components';

interface Props {
  symbol: string;
}

const { symbol } = Astro.props;

// Get D1 database from runtime if available
const db = (Astro.locals.runtime?.env?.DB as D1Database) || null;
const optionsService = OptionsService.getInstance(db);
const { options, currentPrice, error } = await optionsService.fetchOptionsData(symbol);

const sortedGroups = groupOptionsByExpiry(options);

---

<div class="options-table-container">
  {error ? (
    <div class="error-message">
      {error}. Please check the symbol and try again.
    </div>
  ) : (
    <>
      <div class="current-price">
        <div class="flex items-center gap-2">
          <span class="symbol">{symbol}</span>
          <span class="price">Current Price: ${currentPrice.toFixed(4)}</span>
        </div>
        <div class="flex items-center gap-2">
          <span class="price-range">
            Range: ${(currentPrice * 0.9).toFixed(2)} - ${(currentPrice * 1.1).toFixed(2)}
          </span>
        </div>
      </div>
      {options.length > 0 && (
        <HighestScoreOption options={options} currentPrice={currentPrice} symbol={symbol} />
      )}
{/* <Debug value={options} /> */}
      <HighScoreOptions options={options} currentPrice={currentPrice} />

      <div class="expiry-groups">
        {sortedGroups.map((group) => (
          <OptionsGroup group={group} currentPrice={currentPrice} />
        ))}
      </div>
    </>
  )}
</div>

<style>
  .options-table-container {
    overflow-x: auto;
    margin: 1rem 0;
  }

  .current-price {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 1rem;
    padding: 1rem;
    background: #f7fafc;
    border-radius: 0.375rem;
  }

  .symbol {
    font-size: 1.5rem;
    color: #2563eb;
  }

  .price-range {
    font-size: 0.875rem;
    color: #4b5563;
  }

  .refresh-button {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    background-color: #e5e7eb;
    color: #4b5563;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .refresh-button:hover {
    background-color: #d1d5db;
  }

  .expiry-groups {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .error-message {
    padding: 1rem;
    background-color: #fee2e2;
    border: 1px solid #ef4444;
    border-radius: 0.375rem;
    color: #991b1b;
    margin: 1rem 0;
  }
</style>

<script>
  // Handle expiry group expansion
  document.querySelectorAll('.expiry-header').forEach(button => {
    button.addEventListener('click', () => {
      const details = button.nextElementSibling as HTMLElement;
      details.classList.toggle('hidden');
    });
  });
</script>
