---
import { OptionsService } from '../services/optionsService';
import { groupOptionsByExpiry } from '../utils/optionsUtils';
import OptionsGroup from './optionsGroup.astro';

interface Props {
  symbol: string;
}

const { symbol } = Astro.props;
const optionsService = OptionsService.getInstance();
const { options, currentPrice } = await optionsService.fetchOptionsData(symbol);
const sortedGroups = groupOptionsByExpiry(options);
---

<div class="options-table-container">
  <div class="current-price">
    <span>Current Price: ${currentPrice.toFixed(4)}</span>
    <span class="price-range">
      Range: ${(currentPrice * 0.8).toFixed(2)} - ${(currentPrice * 1.2).toFixed(2)}
    </span>
  </div>

  <div class="expiry-groups">
    {sortedGroups.map((group) => (
      <OptionsGroup group={group} currentPrice={currentPrice} />
    ))}
  </div>
</div>

<style>
  .options-table-container {
    overflow-x: auto;
    margin: 1rem 0;
  }

  .current-price {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 1rem;
    padding: 0.5rem;
    background: #f7fafc;
    border-radius: 0.375rem;
  }

  .price-range {
    font-size: 0.875rem;
    color: #4b5563;
  }

  .expiry-groups {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
</style>

<script>
  // Handle expiry group expansion
  document.querySelectorAll('.expiry-header').forEach(button => {
    button.addEventListener('click', () => {
      const details = button.nextElementSibling as HTMLElement;
      details.classList.toggle('hidden');
    });
  });

  // Refresh data every 60 seconds
  setInterval(() => location.reload(), 60000);
</script>
