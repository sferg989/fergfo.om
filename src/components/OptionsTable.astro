---
import { OptionsService, type OptionData } from '../services/optionsService';

interface Props {
  symbol: string;
}

const { symbol } = Astro.props;
const optionsService = OptionsService.getInstance();
const { options, currentPrice } = await optionsService.fetchOptionsData(symbol);

// Group options by expiry date
const groupedOptions = options.reduce((groups, option) => {
  const date = new Date(option.expirationDate);
  const today = new Date();
  const daysToExpiry = Math.ceil((date.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));

  const expiryDate = formatContractName(option.contractName).split(' P')[0];
  const key = option.expirationDate;

  if (!groups[key]) {
    groups[key] = {
      expiryDate,
      rawExpiryDate: option.expirationDate,
      daysToExpiry,
      options: []
    };
  }
  groups[key].options.push(option);
  return groups;
}, {} as Record<string, { expiryDate: string; rawExpiryDate: string; daysToExpiry: number; options: OptionData[] }>);

const sortedGroups = Object.values(groupedOptions).sort((a, b) =>
  new Date(a.rawExpiryDate).getTime() - new Date(b.rawExpiryDate).getTime()
);

// Helper function to format the contract name
function formatContractName(contractName: string): string {
  // Example: AAPL250131P00320000 -> Jan 31 '25 P
  const year = contractName.slice(4, 6);
  const month = contractName.slice(6, 8);
  const day = contractName.slice(8, 10);

  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  const monthStr = months[parseInt(month) - 1];

  return `${monthStr} ${parseInt(day)} '${year} P`;
}

// Helper function to determine if option is ITM or OTM
function getStrikeClass(strike: number, currentPrice: number): string {
  return strike < currentPrice ? 'in-the-money' : 'out-of-the-money';
}
---

<div class="options-table-container">
  <div class="current-price">
    <span>Current Price: ${currentPrice.toFixed(4)}</span>
    <span class="price-range">
      Range: ${(currentPrice * 0.8).toFixed(2)} - ${(currentPrice * 1.2).toFixed(2)}
    </span>
  </div>

  <div class="expiry-groups">
    {sortedGroups.map((group) => (
      <div class="expiry-group">
        <button class="expiry-header">
          <span class="expiry-date">{group.expiryDate}</span>
          <span class="days-to-expiry">{group.daysToExpiry} days</span>
          <span class="contract-count">{group.options.length} contracts</span>
        </button>
        <div class="options-details hidden">
          <table class="options-table">
            <thead>
              <tr>
                <th>Strike</th>
                <th>Last</th>
                <th>Bid</th>
                <th>Ask</th>
                <th>Volume</th>
                <th>Open Int.</th>
                <th>IV%</th>
                <th>Delta</th>
                <th>Gamma</th>
                <th>Theta</th>
              </tr>
            </thead>
            <tbody>
              {group.options.map((option) => (
                <tr>
                  <td class={getStrikeClass(option.strike, currentPrice)}>
                    ${option.strike.toFixed(2)}
                  </td>
                  <td>${option.lastPrice.toFixed(2)}</td>
                  <td>${option.bid.toFixed(2)}</td>
                  <td>${option.ask.toFixed(2)}</td>
                  <td>{option.volume}</td>
                  <td>{option.openInterest}</td>
                  <td>{(option.impliedVolatility * 100).toFixed(1)}%</td>
                  <td>{option.delta?.toFixed(3) || 'N/A'}</td>
                  <td>{option.gamma?.toFixed(4) || 'N/A'}</td>
                  <td>{option.theta?.toFixed(4) || 'N/A'}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  .options-table-container {
    overflow-x: auto;
    margin: 1rem 0;
  }

  .current-price {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 1rem;
    padding: 0.5rem;
    background: #f7fafc;
    border-radius: 0.375rem;
  }

  .price-range {
    font-size: 0.875rem;
    color: #4b5563;
  }

  .options-table {
    width: 100%;
    border-collapse: collapse;
    background: white;
    border: 1px solid #e2e8f0;
    font-size: 0.875rem;
  }

  th, td {
    padding: 0.5rem;
    text-align: right;
    border-bottom: 1px solid #e2e8f0;
    white-space: nowrap;
  }

  th:first-child, td:first-child {
    text-align: left;
  }

  th {
    background: #f7fafc;
    font-weight: 600;
    position: sticky;
    top: 0;
  }

  tr:hover {
    background: #f8fafc;
  }

  /* Alternate row colors for better readability */
  tr:nth-child(even) {
    background: #fafafa;
  }

  .in-the-money {
    color: #2563eb;
    font-weight: 600;
  }

  .out-of-the-money {
    color: #dc2626;
    font-weight: 600;
  }

  .expiry-groups {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .expiry-group {
    border: 1px solid #e2e8f0;
    border-radius: 0.375rem;
    overflow: hidden;
  }

  .expiry-header {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: #f8fafc;
    border: none;
    cursor: pointer;
    font-weight: 600;
  }

  .expiry-header:hover {
    background: #f1f5f9;
  }

  .days-to-expiry {
    color: #6b7280;
    font-size: 0.875rem;
  }

  .contract-count {
    color: #6b7280;
    font-size: 0.875rem;
  }

  .options-details {
    background: white;
    overflow-x: auto;
  }

  .options-details.hidden {
    display: none;
  }
</style>

<script>
  // Handle expiry group expansion
  document.querySelectorAll('.expiry-header').forEach(button => {
    button.addEventListener('click', () => {
      const details = button.nextElementSibling as HTMLElement;
      details.classList.toggle('hidden');
    });
  });

  // Refresh data every 60 seconds
  function refreshData() {
    location.reload();
  }

  setInterval(refreshData, 60000);
</script>
