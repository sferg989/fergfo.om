---
import { PreferredStocks } from '../enums/preferredStocks';

interface Props {
  symbol?: string;
}

const { symbol } = Astro.props;
const preferredStocksList = Object.values(PreferredStocks);
---

<form class="flex items-center gap-3" id="symbolForm">
  <div class="form-group relative">
    <input
      type="text"
      id="symbol"
      name="symbol"
      value={symbol || ''}
      class="w-44 h-12 px-4 py-2 text-lg uppercase font-semibold
        rounded-xl bg-white/50 backdrop-blur-sm
        border-2 border-gray-200/80
        focus:border-blue-500/80 focus:ring-4 focus:ring-blue-200/50
        outline-none transition-all duration-300 ease-in-out
        shadow-[inset_0_2px_4px_rgba(0,0,0,0.06)]
        hover:shadow-[inset_0_2px_8px_rgba(0,0,0,0.08)]
        placeholder-gray-400
        hover:border-gray-300"
      placeholder="Symbol"
      pattern="[A-Za-z]+"
      maxlength="5"
      required
    />
    <div class="absolute -top-2.5 left-3 px-2 text-xs font-medium
      text-gray-600 bg-white rounded-full border border-gray-200/50
      shadow-sm transition-all duration-300 group-hover:text-gray-700">
      Stock Symbol
    </div>
  </div>

  <div class="form-group relative">
    <select
      id="preferredStockSelect"
      class="h-12 px-4 py-2 text-base font-medium
        rounded-xl bg-white/50 backdrop-blur-sm
        border-2 border-gray-200/80
        focus:border-blue-500/80 focus:ring-4 focus:ring-blue-200/50
        outline-none transition-all duration-300 ease-in-out
        shadow-[inset_0_2px_4px_rgba(0,0,0,0.06)]
        hover:shadow-[inset_0_2px_8px_rgba(0,0,0,0.08)]
        text-gray-600
        hover:border-gray-300
        appearance-none"
    >
      <option value="">Preferred Stocks</option>
      {preferredStocksList.map((stock) => (
        <option value={stock}>{stock}</option>
      ))}
    </select>
    <div class="absolute -top-2.5 left-3 px-2 text-xs font-medium
      text-gray-600 bg-white rounded-full border border-gray-200/50
      shadow-sm transition-all duration-300 group-hover:text-gray-700">
      Quick Select
    </div>
    <div class="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none text-gray-500">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </div>
  </div>

  <button
    type="submit"
    class="h-12 px-8 bg-gradient-to-r from-blue-600 to-blue-700
      text-white font-medium rounded-lg
      hover:from-blue-700 hover:to-blue-800
      focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
      transition-all duration-200 transform hover:scale-105
      shadow-sm hover:shadow-md
      flex items-center gap-2"
  >
    <span>Load</span>
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
    </svg>
  </button>
</form>

<style>
  input:invalid {
    border-color: rgb(254 202 202); /* red-200 */
    background: linear-gradient(
      to bottom right,
      rgba(255, 255, 255, 0.9),
      rgba(254, 226, 226, 0.3)
    );
  }

  input:invalid:focus {
    border-color: rgb(248 113 113); /* red-400 */
    box-shadow: 0 0 0 3px rgba(254, 226, 226, 0.8); /* ring-red-100 */
  }

  .form-group {
    position: relative;
    display: inline-block;
  }

  input:focus, select:focus {
    transform: translateY(-1px);
    box-shadow:
      inset 0 2px 4px rgba(0,0,0,0.06),
      0 4px 12px rgba(59, 130, 246, 0.1);
  }

  .form-group:focus-within div {
    transform: translateY(-1px);
    color: rgb(37, 99, 235);
    border-color: rgba(37, 99, 235, 0.2);
    background: linear-gradient(to right, rgba(255,255,255,0.9), rgba(255,255,255,1));
  }

  input:hover, select:hover {
    background: linear-gradient(
      to bottom right,
      rgba(255, 255, 255, 0.9),
      rgba(255, 255, 255, 0.8)
    );
  }

  input, select {
    text-shadow: 0 1px 1px rgba(0,0,0,0.1);
    transition: all 0.2s ease-in-out;
  }

  button:hover::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 50%;
    height: 100%;
    background: linear-gradient(
      120deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    100% {
      left: 200%;
    }
  }
</style>

<script>
  const form = document.getElementById('symbolForm');
  const input = document.getElementById('symbol') as HTMLInputElement;
  const select = document.getElementById('preferredStockSelect') as HTMLSelectElement | null;

  input?.addEventListener('input', (e) => {
    const target = e.target as HTMLInputElement;
    target.value = target.value.toUpperCase();
  });

  select?.addEventListener('change', (e) => {
    const target = e.target as HTMLSelectElement;
    if (target.value) {
      input.value = target.value;
      form?.dispatchEvent(new Event('submit'));
    }
  });

  form?.addEventListener('submit', (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const symbol = formData.get('symbol')?.toString().toUpperCase().trim();
    if (symbol) {
      const url = new URL(window.location.href);
      url.searchParams.set('symbol', symbol);
      window.location.href = url.toString();
    }
  });
</script>
