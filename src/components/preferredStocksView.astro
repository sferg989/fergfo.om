---
import { PreferredStocks } from '../enums/preferredStocks';
import { OptionsService } from '../services/optionsService';
import HighScoreOptions from './highScoreOptions.astro';
import { ScoreThresholds } from '../enums/scoreThresholds';

interface Props {
  forceRefresh?: boolean;
}

const { forceRefresh = false } = Astro.props;
const optionsService = OptionsService.getInstance();
const preferredStocksData = await Promise.all(
  Object.values(PreferredStocks).map(async (symbol) => {
    const { options, currentPrice, error } = await optionsService.fetchOptionsData(symbol, forceRefresh);
    const lastFetchTime = optionsService.getLastFetchTime(symbol, 'options');
    const cacheTimeRemaining = optionsService.getCacheTimeRemaining(symbol, 'options');

    return {
      symbol,
      options,
      currentPrice,
      error,
      lastFetchTime,
      cacheTimeRemaining
    };
  })
);
---

<div class="preferred-stocks-container">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold">Preferred Stocks High Score Options</h1>
    <form method="get">
      <input type="hidden" name="refresh" value="true" />
      <button type="submit" class="refresh-button px-3 py-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors">
        Refresh All Data
      </button>
    </form>
  </div>

  <div class="grid gap-8">
    {preferredStocksData.map(({ symbol, options, currentPrice, error, lastFetchTime, cacheTimeRemaining }) => (
      <div class="stock-section">
        <div class="flex justify-between items-center mb-3">
          <h2 class="text-xl font-semibold text-blue-600">{symbol}</h2>
          <div class="text-xs text-gray-500">
            {lastFetchTime && (
              <>
                Last updated: {lastFetchTime.toLocaleTimeString()}
                {cacheTimeRemaining !== null && (
                  <span> (Refreshes in {cacheTimeRemaining} min)</span>
                )}
              </>
            )}
          </div>
        </div>
        {error ? (
          <div class="error-message p-4 bg-red-50 text-red-700 rounded">
            {error}
          </div>
        ) : (
          <HighScoreOptions
            options={options}
            currentPrice={currentPrice}
            minScore={ScoreThresholds.PREFERRED}
          />
        )}
      </div>
    ))}
  </div>
</div>

<style>
  .preferred-stocks-container {
    padding: 1rem;
    max-width: 1400px;
    margin: 0 auto;
  }

  .stock-section {
    background: #ffffff;
    border-radius: 0.5rem;
    padding: 1rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
</style>
