---
import { OptionsService } from '../services/optionsService';
import { getRelativeTime, calculatePriceChange, formatPriceChange } from '../utils/timeUtils';

interface Props {
  symbol: string;
}

const { symbol } = Astro.props;

// Get D1 database from runtime if available
const db = (Astro.locals.runtime?.env?.DB as D1Database) || null;

let snapshotsData: { snapshots: any[]; error?: string } = { snapshots: [] };
let topOptionsData: { topOptions: any[]; error?: string } = { topOptions: [] };
let performanceData: { snapshots: any[]; error?: string } = { snapshots: [] };

if (db) {
  try {
    const optionsService = OptionsService.getInstance(db);

    // Fetch historical snapshots
    try {
      const snapshots = await optionsService.getHistoricalSnapshots(symbol, 5);
      snapshotsData = { snapshots };
    } catch (err) {
      console.error('Error fetching historical snapshots:', err);
      snapshotsData = { snapshots: [], error: err instanceof Error ? err.message : 'Unknown error' };
    }

    // Fetch top performing options
    try {
      const topOptions = await optionsService.getTopPerformingOptions(symbol, 30, 5);
      topOptionsData = { topOptions };
    } catch (err) {
      console.error('Error fetching top performing options:', err);
      topOptionsData = { topOptions: [], error: err instanceof Error ? err.message : 'Unknown error' };
    }

    // Fetch performance data
    try {
      const performanceResult = await optionsService.getStockPerformanceData(symbol, 30);
      performanceData = { snapshots: performanceResult.snapshots };
    } catch (err) {
      console.error('Error fetching performance data:', err);
      performanceData = { snapshots: [], error: err instanceof Error ? err.message : 'Unknown error' };
    }

  } catch (err) {
    console.error('Error initializing options service:', err);
  }
}
---

<div class="historical-data-container">
  <h2 class="text-xl font-bold mb-4">ðŸ“Š Historical Performance for {symbol}</h2>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- Recent Snapshots -->
    <div class="bg-white p-4 rounded-lg shadow">
      <h3 class="text-lg font-semibold mb-3">Recent Data Snapshots</h3>
      <div>
        {snapshotsData.error ? (
          <p class="text-red-500">Error: {snapshotsData.error}</p>
        ) : snapshotsData.snapshots.length > 0 ? (
          <div>
            {snapshotsData.snapshots.map((snapshot, index) => {
              const prevSnapshot = snapshotsData.snapshots[index + 1];
              const priceChangeData = prevSnapshot
                ? calculatePriceChange(snapshot.currentPrice, prevSnapshot.currentPrice)
                : null;
              const changeFormatted = priceChangeData
                ? formatPriceChange(priceChangeData.change, priceChangeData.changePercent)
                : null;

              return (
                <div class="snapshot-item">
                  <div class="flex justify-between items-center">
                    <div class="font-medium">${snapshot.currentPrice.toFixed(2)}</div>
                    {changeFormatted && (
                      <div class={changeFormatted.className + ' text-sm font-medium'}>
                        {changeFormatted.text}
                      </div>
                    )}
                  </div>
                  <div class="text-sm text-gray-600">
                    {getRelativeTime(snapshot.fetchedAt)}
                    {'snapshotCount' in snapshot && snapshot.snapshotCount > 1 && (
                      <span class="ml-2 text-xs bg-gray-100 px-2 py-1 rounded">
                        {snapshot.snapshotCount} snapshots
                      </span>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        ) : (
          <p class="text-gray-500">No historical data available</p>
        )}
      </div>
    </div>

    <!-- Top Performing Options -->
    <div class="bg-white p-4 rounded-lg shadow">
      <h3 class="text-lg font-semibold mb-3">Top Performing Options (30 days)</h3>
      <div>
        {topOptionsData.error ? (
          <p class="text-red-500">Error: {topOptionsData.error}</p>
        ) : topOptionsData.topOptions.length > 0 ? (
          <div>
            {topOptionsData.topOptions.map((option) => (
              <div class="option-item">
                <div class="font-medium">${option.strike} Strike</div>
                <div class="text-sm text-blue-600">
                  Max Score: {option.totalScore?.toFixed(1) || 'N/A'}
                </div>
                <div class="text-xs text-gray-600">
                  {new Date(option.expirationDate).toLocaleDateString()}
                </div>
                <div class="text-xs text-gray-500">
                  Seen {option.snapshotCount || 1} times
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p class="text-gray-500">No historical options data available</p>
        )}
      </div>
    </div>

    <!-- Performance Chart -->
    <div class="bg-white p-4 rounded-lg shadow md:col-span-2">
      <h3 class="text-lg font-semibold mb-3">Performance Trends</h3>
      <div>
        {performanceData.error ? (
          <p class="text-red-500">Error: {performanceData.error}</p>
        ) : performanceData.snapshots.length > 0 ? (
          <div class="grid grid-cols-3 gap-4">
            {performanceData.snapshots.map((day) => (
              <div class="day-summary">
                <div class="text-sm font-medium">{day.date}</div>
                <div class="text-xs">
                  Price: ${day.lowPrice.toFixed(2)} - ${day.highPrice.toFixed(2)}
                </div>
                <div class="text-xs text-blue-600">
                  Avg Score: {day.avgOptionScore?.toFixed(1) || 'N/A'}
                </div>
                <div class="text-xs text-gray-500">
                  {day.uniqueOptionsCount} options analyzed
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p class="text-gray-500">No performance data available</p>
        )}
      </div>
    </div>
  </div>
</div>

<style>
  .historical-data-container {
    margin: 2rem 0;
  }

  .snapshot-item {
    padding: 0.75rem;
    border: 1px solid #e5e7eb;
    border-radius: 0.375rem;
    margin-bottom: 0.5rem;
    background: #f9fafb;
  }

  .option-item {
    padding: 0.5rem;
    border-left: 3px solid #3b82f6;
    margin-bottom: 0.5rem;
    background: #f8fafc;
  }
</style>
