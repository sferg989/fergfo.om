name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NPM_GH_TOKEN: ${{ secrets.NPM_GH_TOKEN }}

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run Astro check
      run: npm run astro:check

    - name: Build project
      run: npm run build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # Only deploy on pushes to main branch (not on PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      NPM_GH_TOKEN: ${{ secrets.NPM_GH_TOKEN }}
      PUBLIC_FINNHUB_API_KEY: ${{ secrets.PUBLIC_FINNHUB_API_KEY }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build
      env:
        NODE_ENV: production

    - name: Deploy to Cloudflare Workers
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        command: deploy --env production

    - name: Apply Database Migration
      run: npx wrangler d1 migrations apply options-tracker --env production
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-worker:
    needs: deploy
    runs-on: ubuntu-latest
    # Only deploy on pushes to main branch (not on PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      NPM_GH_TOKEN: ${{ secrets.NPM_GH_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm ci

    - name: Validate Worker Configuration
      run: |
        echo "Validating background worker configuration..."
        echo "Checking wrangler.background.toml..."
        
        # Verify the worker config file exists and has correct settings
        if [ ! -f "wrangler.background.toml" ]; then
          echo "‚ùå wrangler.background.toml not found!"
          exit 1
        fi
        
        # Check that cron trigger is configured
        if ! grep -q "crons = \[" wrangler.background.toml; then
          echo "‚ùå Cron trigger not configured in wrangler.background.toml!"
          exit 1
        fi
        
        # Check that database binding is configured
        if ! grep -q "binding = \"DB\"" wrangler.background.toml; then
          echo "‚ùå Database binding not configured in wrangler.background.toml!"
          exit 1
        fi
        
        echo "‚úÖ Worker configuration validated"
        echo "‚úÖ Cron trigger: Every minute"
        echo "‚úÖ Database binding: DB"
        echo "‚úÖ Environment: production"
        
        # Check required secrets
        echo "Checking required secrets..."
        if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
          echo "‚ùå CLOUDFLARE_API_TOKEN not set!"
          exit 1
        fi
        echo "‚úÖ CLOUDFLARE_API_TOKEN is set"
        
        # Check worker dependencies
        echo "Checking worker dependencies..."
        if [ ! -f "src/workers/background_refresh.ts" ]; then
          echo "‚ùå Background refresh worker source not found!"
          exit 1
        fi
        if [ ! -f "src/services/background_refresh_service.ts" ]; then
          echo "‚ùå Background refresh service not found!"
          exit 1
        fi
        echo "‚úÖ Worker dependencies verified"
        echo ""
        echo "üìÖ CRON SCHEDULE DETAILS"
        echo "========================"
        echo "‚Ä¢ Schedule: Every minute (* * * * *)"
        echo "‚Ä¢ Market hours: 9:30 AM - 4:00 PM ET, Monday-Friday"
        echo "‚Ä¢ Worker checks market hours before processing"
        echo "‚Ä¢ Round-robin refresh for all tracked symbols"
        echo "‚Ä¢ Expected refresh frequency: ~15 minutes per symbol"
        
        # Show database access information
        echo ""
        echo "üóÑÔ∏è  DATABASE ACCESS"
        echo "=================="
        echo "‚Ä¢ Database: options-tracker (production)"
        echo "‚Ä¢ Tables: symbol_tracking, refresh_state, stock_snapshots, etc."
        echo "‚Ä¢ Worker has full read/write access to all tables"
        echo "‚Ä¢ Data flow: External API ‚Üí Worker ‚Üí Database ‚Üí UI Components"
        echo ""
        
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Verify Database Schema
      run: |
        echo "Verifying database schema for background refresh worker..."
        npx wrangler d1 execute options-tracker --env production --command="SELECT COUNT(*) as symbol_count FROM symbol_tracking;"
        echo "‚úÖ Database schema verified - symbol tracking table exists"
        
        # Check that preferred stocks are loaded
        echo "Checking preferred stocks in tracking table..."
        npx wrangler d1 execute options-tracker --env production --command="SELECT symbol, priority FROM symbol_tracking WHERE is_preferred = 1 ORDER BY priority DESC;"
        echo "‚úÖ Preferred stocks loaded and ready for background refresh"
        
        # Verify refresh state table
        echo "Checking refresh state table..."
        npx wrangler d1 execute options-tracker --env production --command="SELECT * FROM refresh_state WHERE id = 'main';"
        echo "‚úÖ Refresh state table initialized and ready"
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Deploy Background Refresh Worker
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        command: deploy --config wrangler.background.toml --env production
      # Continue on error to allow verification steps to run
      continue-on-error: false

    - name: Verify Worker Deployment
      run: |
        echo "Waiting for worker to be ready..."
        sleep 30
        echo "Background refresh worker deployed successfully!"
        echo "Worker will start running cron jobs every minute during market hours"
        
        # Check worker status
        echo "Checking worker status..."
        npx wrangler tail --config wrangler.background.toml --env production &
        TAIL_PID=$!
        sleep 10
        kill $TAIL_PID || true
        
        echo "‚úÖ Background refresh worker deployment complete!"
        echo "üìÖ Cron trigger: Every minute during market hours (9:30 AM - 4:00 PM ET)"
        echo "üîÑ Round-robin refresh for all tracked symbols"
        
        # Test worker HTTP endpoints
        echo "üß™ Testing worker HTTP endpoints..."
        WORKER_URL="https://fergfo-background-refresh.worker.dev"
        
        # Test stats endpoint (this should work without auth in production)
        echo "Testing stats endpoint..."
        curl -s "$WORKER_URL/refresh/stats" || echo "Stats endpoint test completed"
        
        echo "üéâ Worker deployment and verification complete!"
        
        # Show expected worker behavior
        echo ""
        echo "üìä EXPECTED WORKER BEHAVIOR"
        echo "============================"
        echo "‚Ä¢ Cron trigger fires every minute"
        echo "‚Ä¢ Worker checks if market is open"
        echo "‚Ä¢ If market open: selects next symbol, fetches data, saves to DB"
        echo "‚Ä¢ If market closed: skips processing"
        echo "‚Ä¢ Round-robin through all tracked symbols"
        echo "‚Ä¢ Logs all activities for monitoring"
        echo ""
        
        # Deployment summary
        echo ""
        echo "üöÄ DEPLOYMENT SUMMARY"
        echo "====================="
        echo "‚úÖ Main application deployed to Cloudflare Pages"
        echo "‚úÖ Database migration applied (symbol tracking schema)"
        echo "‚úÖ Background refresh worker deployed with cron trigger"
        echo "‚úÖ Database schema verified and preferred stocks loaded"
        echo ""
        echo "üìã NEXT STEPS"
        echo "============="
        echo "‚Ä¢ Worker will start running cron jobs automatically"
        echo "‚Ä¢ Check Cloudflare dashboard for worker logs"
        echo "‚Ä¢ Monitor refresh statistics via /api/refresh-status"
        echo "‚Ä¢ Background refresh runs every minute during market hours"
        echo ""
        echo "üîç MONITORING & DEBUGGING"
        echo "========================="
        echo "‚Ä¢ Worker logs: Cloudflare dashboard > Workers > fergfo-background-refresh"
        echo "‚Ä¢ API endpoint: /api/refresh-status (check refresh statistics)"
        echo "‚Ä¢ Manual trigger: POST to worker HTTP endpoints (with auth)"
        echo "‚Ä¢ Database queries: Check symbol_tracking and refresh_state tables"
        echo ""
        echo "‚ö†Ô∏è  IMPORTANT NOTES"
        echo "=================="
        echo "‚Ä¢ Worker only runs during market hours (9:30 AM - 4:00 PM ET)"
        echo "‚Ä¢ First data will appear after worker processes symbols"
        echo "‚Ä¢ Check worker logs if no data appears within 30 minutes"
        echo "‚Ä¢ Ensure CLOUDFLARE_API_TOKEN has D1 database access"
        echo ""
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
