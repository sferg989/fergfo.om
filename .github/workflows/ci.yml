name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NPM_GH_TOKEN: ${{ secrets.NPM_GH_TOKEN }}

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run Astro check
      run: npm run astro:check

    - name: Build project
      run: npm run build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # Only deploy on pushes to main branch (not on PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      NPM_GH_TOKEN: ${{ secrets.NPM_GH_TOKEN }}
      PUBLIC_FINNHUB_API_KEY: ${{ secrets.PUBLIC_FINNHUB_API_KEY }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build
      env:
        NODE_ENV: production

    - name: Deploy to Cloudflare Workers
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        command: deploy --env production

    - name: Apply Database Migration
      run: |
        echo "Applying database migrations..."
        npx wrangler d1 migrations apply options-tracker --env production --remote
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-worker:
    needs: deploy
    runs-on: ubuntu-latest
    # Only deploy on pushes to main branch (not on PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      NPM_GH_TOKEN: ${{ secrets.NPM_GH_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm ci

    - name: Validate Worker Configuration
      run: |
        echo "Validating background worker configuration..."
        
        # Basic validation
        if [ ! -f "wrangler.background.toml" ]; then
          echo "❌ wrangler.background.toml not found!"
          exit 1
        fi
        
        if [ ! -f "src/workers/background_refresh.ts" ]; then
          echo "❌ Background refresh worker source not found!"
          exit 1
        fi
        
        echo "✅ Worker configuration validated"
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Verify Database Schema
      run: |
        echo "Verifying database schema..."
        sleep 10  # Wait for migration to complete
        
        # Simple verification that tables exist
        npx wrangler d1 execute options-tracker --env production --remote --command="SELECT name FROM sqlite_master WHERE type='table';"
        echo "✅ Database schema verified"
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Deploy Background Refresh Worker
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        command: deploy --config wrangler.background.toml --env production
      # Continue on error to allow verification steps to run
      continue-on-error: false

    - name: Verify Worker Deployment
      run: |
        echo "Waiting for worker to be ready..."
        sleep 30
        echo "✅ Background refresh worker deployed successfully!"
        echo "Worker will start running cron jobs every minute during market hours."
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
